/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> largestValues(TreeNode* root) {
        vector<int> num;
        if(root==0){
            return num;
        }
        if(root->left==0 && root->right==0){
            num.push_back(root->val);
            return num;
        }
        queue<TreeNode*> q1;
        queue<int> q2;
        q1.push(root);
        q2.push(0);
        num.push_back(root->val);
        while(q1.size()!=0){
            vector<int> num_temp;
            int tempLev = q2.front();
            while(q2.size()!=0 && q2.front() == tempLev){
                TreeNode* tmp = q1.front();
                q1.pop();
                q2.pop();
                if(tmp->left){
                    q1.push(tmp->left);
                    q2.push(tempLev+1);
                    num_temp.push_back(tmp->left->val);
                }
                if(tmp->right){
                    q1.push(tmp->right);
                    q2.push(tempLev+1);
                    num_temp.push_back(tmp->right->val);
                }
            }
            int maxx;
            if(num_temp.size()!=0) {
                maxx = num_temp[0];
                for(int i = 0; i<num_temp.size(); i++){
                    if(num_temp[i]>maxx) maxx = num_temp[i];
                }
                num.push_back(maxx);
            }
            //maxx = *max_element(num_temp.begin(),num_temp.end());            
        }
        return num;
    }
};
