/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* convertBST(TreeNode* root) {
        if(root==0) return root;
        queue<TreeNode*> q1;
        queue<int> q2;
        vector<int> nums;
        q1.push(root);
        q2.push(0);
        while(q1.size()){
            int tpLev=q2.front();
            while(q2.size() && q2.front() == tpLev){
                TreeNode* tmp = q1.front();
                nums.push_back(tmp->val);
                q1.pop();
                q2.pop();
                if(tmp->left){
                    q1.push(tmp->left);
                    q2.push(tpLev+1);
                }
                if(tmp->right){
                    q1.push(tmp->right);
                    q2.push(tpLev+1);
                }                
            }
        }
        //sort(nums.begin(), nums.end());
        q1.push(root);
        q2.push(0);
        while(q1.size()){
            int tpLev=q2.front();
            while(q2.size() && q2.front() == tpLev){
                TreeNode* tmp = q1.front();
                tmp->val += sumPlus(tmp->val, nums);
                q1.pop();
                q2.pop();
                if(tmp->left){
                    q1.push(tmp->left);
                    q2.push(tpLev+1);
                }
                if(tmp->right){
                    q1.push(tmp->right);
                    q2.push(tpLev+1);
                }                
            }
        }
        return root;
    }
    
    int sumPlus(int a, vector<int>& num){
        int res = 0;
        for(int i=0; i<num.size(); i++){
            if(num[i]>a) res += num[i];
        }
        return res;
    }
};
